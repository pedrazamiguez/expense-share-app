name: Create App Release

on:
  push:
    branches:
      - main

jobs:
  build_and_release:
    name: Build and Release App
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      OER_APP_ID_RELEASE: ${{ secrets.OER_APP_ID_RELEASE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Decode google-services.json
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}" | base64 --decode > ${{ github.workspace }}/app/google-services.json

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Decode Keystore
        run: |
          mkdir -p ${{ github.workspace }}/keystore
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 --decode > ${{ github.workspace }}/keystore/release.keystore

      - name: Build Release App (APK)
        env:
          SIGNING_STORE_FILE: ${{ github.workspace }}/keystore/release.keystore
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: ./gradlew assembleRelease

      - name: Extract Version Name
        id: version_extractor
        run: |
          VERSION_NAME=$(grep "versionName" app/build.gradle.kts | head -n 1 | sed -e 's/versionName = "//' -e 's/"//' | tr -d '[:space:]')
          echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_OUTPUT
          echo "App Version: $VERSION_NAME"

      - name: Rename APK with version
        run: |
          VERSION_NAME=${{ steps.version_extractor.outputs.VERSION_NAME }}
          mv app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/app-release-${VERSION_NAME}.apk

      - name: Generate Changelog
        id: changelog
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          LATEST_TAG=$(git tag -l "v*" | grep -v "v${{ steps.version_extractor.outputs.VERSION_NAME }}" | sort -V | tail -n 1)
          
          # Get PR data with labels from both develop and main base branches
          if [ -z "$LATEST_TAG" ]; then
            # Get PRs merged to develop (regular features/bugs/refactors)
            PR_DATA_DEVELOP=$(gh pr list --base develop --state merged --json number,title,labels \
              --jq '.[] | select(.labels | map(.name) | index("sync") | not) | select(.labels | map(.name) | index("config") | not)')
            # Get PRs merged to main (hotfixes)
            PR_DATA_MAIN=$(gh pr list --base main --state merged --json number,title,labels \
              --jq '.[] | select(.labels | map(.name) | index("sync") | not) | select(.labels | map(.name) | index("config") | not)')
          else
            LATEST_TAG_COMMIT=$(git rev-list -n 1 $LATEST_TAG)
            # Get PRs merged to develop since last tag
            PR_DATA_DEVELOP=$(gh pr list --search "is:pr is:merged base:develop merged:>$(git show -s --format=%cI $LATEST_TAG_COMMIT)" \
              --json number,title,labels \
              --jq '.[] | select(.labels | map(.name) | index("sync") | not) | select(.labels | map(.name) | index("config") | not)')
            # Get PRs merged to main since last tag
            PR_DATA_MAIN=$(gh pr list --search "is:pr is:merged base:main merged:>$(git show -s --format=%cI $LATEST_TAG_COMMIT)" \
              --json number,title,labels \
              --jq '.[] | select(.labels | map(.name) | index("sync") | not) | select(.labels | map(.name) | index("config") | not)')
          fi
          
          # Combine both PR datasets
          PR_DATA=$(echo -e "$PR_DATA_DEVELOP\n$PR_DATA_MAIN" | jq -s 'add | unique_by(.number)')
          
          # Initialize category arrays
          ADDED_PRS=""
          FIXED_PRS=""
          IMPROVED_PRS=""
          
          # Process each PR and categorize by labels
          while IFS= read -r pr; do
            if [ -n "$pr" ]; then
              PR_NUMBER=$(echo "$pr" | jq -r '.number')
              PR_TITLE=$(echo "$pr" | jq -r '.title')
              PR_LABELS=$(echo "$pr" | jq -r '.labels[].name')
              
              # Extract issue number from PR title (format: [EXSHAPP-XXXX])
              ISSUE_NUMBER=$(echo "$PR_TITLE" | grep -o 'EXSHAPP-[0-9]\{4\}' | head -1)
              
              # Create formatted changelog entry with issue link
              if [ -n "$ISSUE_NUMBER" ]; then
                ISSUE_NUM_ONLY=$(echo "$ISSUE_NUMBER" | sed 's/EXSHAPP-0*//')
                CHANGELOG_ENTRY="#${PR_NUMBER}: #${ISSUE_NUM_ONLY} - ${PR_TITLE#*]: }"
              else
                CHANGELOG_ENTRY="#${PR_NUMBER}: ${PR_TITLE}"
              fi
              
              # Categorize based on labels
              if echo "$PR_LABELS" | grep -q "feature"; then
                ADDED_PRS="${ADDED_PRS}${CHANGELOG_ENTRY}\n"
              elif echo "$PR_LABELS" | grep -q -E "(hotfix|bug)"; then
                FIXED_PRS="${FIXED_PRS}${CHANGELOG_ENTRY}\n"
              elif echo "$PR_LABELS" | grep -q "enhancement"; then
                IMPROVED_PRS="${IMPROVED_PRS}${CHANGELOG_ENTRY}\n"
              fi
            fi
          done <<< "$(echo "$PR_DATA" | jq -c '.[]?')"
          
          # Build the changelog with sections
          CHANGELOG=""
          
          if [ -n "$ADDED_PRS" ]; then
            CHANGELOG="${CHANGELOG}#### Added\n\n$(echo -e "$ADDED_PRS")\n"
          fi
          
          if [ -n "$FIXED_PRS" ]; then
            CHANGELOG="${CHANGELOG}#### Fixed\n\n$(echo -e "$FIXED_PRS")\n"
          fi
          
          if [ -n "$IMPROVED_PRS" ]; then
            CHANGELOG="${CHANGELOG}#### Improved\n\n$(echo -e "$IMPROVED_PRS")\n"
          fi
          
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="No new pull requests since the last release."
          fi
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Collect Commit Metadata
        id: commit_meta
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
          echo "COMMIT_MSG=${COMMIT_MSG}" >> $GITHUB_OUTPUT
          echo "COMMIT_AUTHOR=${COMMIT_AUTHOR}" >> $GITHUB_OUTPUT

      - name: Create and Push Git Tag
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git tag -f v${{ steps.version_extractor.outputs.VERSION_NAME }} ${{ github.sha }}
          git push origin -f v${{ steps.version_extractor.outputs.VERSION_NAME }}

      - name: Create GitHub Release and Upload Artifact
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version_extractor.outputs.VERSION_NAME }}
          name: "Release ${{ steps.version_extractor.outputs.VERSION_NAME }} (Build ${{ github.run_number }})"
          body: |
            Release of version ${{ steps.version_extractor.outputs.VERSION_NAME }}.
            Triggered by push to main.

            **Latest Commit**
            - Message: ${{ steps.commit_meta.outputs.COMMIT_MSG }}
            - Author: ${{ steps.commit_meta.outputs.COMMIT_AUTHOR }}
            - SHA: ${{ github.sha }}

            ### Changelog
            ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false
          files: |
            app/build/outputs/apk/release/app-release-${{ steps.version_extractor.outputs.VERSION_NAME }}.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
